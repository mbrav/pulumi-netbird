// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"errors"
	"github.com/mbrav/pulumi-netbird/sdk/go/netbird/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A NetBird network resource, such as a CIDR range assigned to the network.
type NetworkResource struct {
	pulumi.CustomResourceState

	// CIDR or IP address block assigned to the resource.
	Address pulumi.StringOutput `pulumi:"address"`
	// Optional description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the resource is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// List of group IDs associated with this resource.
	Group_ids pulumi.StringArrayOutput `pulumi:"group_ids"`
	// Name of the network resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network this resource belongs to.
	Network_id pulumi.StringOutput `pulumi:"network_id"`
}

// NewNetworkResource registers a new resource with the given unique name, arguments, and options.
func NewNetworkResource(ctx *pulumi.Context,
	name string, args *NetworkResourceArgs, opts ...pulumi.ResourceOption) (*NetworkResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Group_ids == nil {
		return nil, errors.New("invalid value for required argument 'Group_ids'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Network_id == nil {
		return nil, errors.New("invalid value for required argument 'Network_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkResource
	err := ctx.RegisterResource("netbird:resource:NetworkResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkResource gets an existing NetworkResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkResourceState, opts ...pulumi.ResourceOption) (*NetworkResource, error) {
	var resource NetworkResource
	err := ctx.ReadResource("netbird:resource:NetworkResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkResource resources.
type networkResourceState struct {
}

type NetworkResourceState struct {
}

func (NetworkResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkResourceState)(nil)).Elem()
}

type networkResourceArgs struct {
	// CIDR or IP address block assigned to the resource.
	Address string `pulumi:"address"`
	// Optional description of the resource.
	Description *string `pulumi:"description"`
	// Whether the resource is enabled.
	Enabled bool `pulumi:"enabled"`
	// List of group IDs associated with this resource.
	Group_ids []string `pulumi:"group_ids"`
	// Name of the network resource.
	Name string `pulumi:"name"`
	// ID of the network this resource belongs to.
	Network_id string `pulumi:"network_id"`
}

// The set of arguments for constructing a NetworkResource resource.
type NetworkResourceArgs struct {
	// CIDR or IP address block assigned to the resource.
	Address pulumi.StringInput
	// Optional description of the resource.
	Description pulumi.StringPtrInput
	// Whether the resource is enabled.
	Enabled pulumi.BoolInput
	// List of group IDs associated with this resource.
	Group_ids pulumi.StringArrayInput
	// Name of the network resource.
	Name pulumi.StringInput
	// ID of the network this resource belongs to.
	Network_id pulumi.StringInput
}

func (NetworkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkResourceArgs)(nil)).Elem()
}

type NetworkResourceInput interface {
	pulumi.Input

	ToNetworkResourceOutput() NetworkResourceOutput
	ToNetworkResourceOutputWithContext(ctx context.Context) NetworkResourceOutput
}

func (*NetworkResource) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkResource)(nil)).Elem()
}

func (i *NetworkResource) ToNetworkResourceOutput() NetworkResourceOutput {
	return i.ToNetworkResourceOutputWithContext(context.Background())
}

func (i *NetworkResource) ToNetworkResourceOutputWithContext(ctx context.Context) NetworkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkResourceOutput)
}

// NetworkResourceArrayInput is an input type that accepts NetworkResourceArray and NetworkResourceArrayOutput values.
// You can construct a concrete instance of `NetworkResourceArrayInput` via:
//
//	NetworkResourceArray{ NetworkResourceArgs{...} }
type NetworkResourceArrayInput interface {
	pulumi.Input

	ToNetworkResourceArrayOutput() NetworkResourceArrayOutput
	ToNetworkResourceArrayOutputWithContext(context.Context) NetworkResourceArrayOutput
}

type NetworkResourceArray []NetworkResourceInput

func (NetworkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkResource)(nil)).Elem()
}

func (i NetworkResourceArray) ToNetworkResourceArrayOutput() NetworkResourceArrayOutput {
	return i.ToNetworkResourceArrayOutputWithContext(context.Background())
}

func (i NetworkResourceArray) ToNetworkResourceArrayOutputWithContext(ctx context.Context) NetworkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkResourceArrayOutput)
}

// NetworkResourceMapInput is an input type that accepts NetworkResourceMap and NetworkResourceMapOutput values.
// You can construct a concrete instance of `NetworkResourceMapInput` via:
//
//	NetworkResourceMap{ "key": NetworkResourceArgs{...} }
type NetworkResourceMapInput interface {
	pulumi.Input

	ToNetworkResourceMapOutput() NetworkResourceMapOutput
	ToNetworkResourceMapOutputWithContext(context.Context) NetworkResourceMapOutput
}

type NetworkResourceMap map[string]NetworkResourceInput

func (NetworkResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkResource)(nil)).Elem()
}

func (i NetworkResourceMap) ToNetworkResourceMapOutput() NetworkResourceMapOutput {
	return i.ToNetworkResourceMapOutputWithContext(context.Background())
}

func (i NetworkResourceMap) ToNetworkResourceMapOutputWithContext(ctx context.Context) NetworkResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkResourceMapOutput)
}

type NetworkResourceOutput struct{ *pulumi.OutputState }

func (NetworkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkResource)(nil)).Elem()
}

func (o NetworkResourceOutput) ToNetworkResourceOutput() NetworkResourceOutput {
	return o
}

func (o NetworkResourceOutput) ToNetworkResourceOutputWithContext(ctx context.Context) NetworkResourceOutput {
	return o
}

// CIDR or IP address block assigned to the resource.
func (o NetworkResourceOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Optional description of the resource.
func (o NetworkResourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the resource is enabled.
func (o NetworkResourceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// List of group IDs associated with this resource.
func (o NetworkResourceOutput) Group_ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.StringArrayOutput { return v.Group_ids }).(pulumi.StringArrayOutput)
}

// Name of the network resource.
func (o NetworkResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the network this resource belongs to.
func (o NetworkResourceOutput) Network_id() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkResource) pulumi.StringOutput { return v.Network_id }).(pulumi.StringOutput)
}

type NetworkResourceArrayOutput struct{ *pulumi.OutputState }

func (NetworkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkResource)(nil)).Elem()
}

func (o NetworkResourceArrayOutput) ToNetworkResourceArrayOutput() NetworkResourceArrayOutput {
	return o
}

func (o NetworkResourceArrayOutput) ToNetworkResourceArrayOutputWithContext(ctx context.Context) NetworkResourceArrayOutput {
	return o
}

func (o NetworkResourceArrayOutput) Index(i pulumi.IntInput) NetworkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkResource {
		return vs[0].([]*NetworkResource)[vs[1].(int)]
	}).(NetworkResourceOutput)
}

type NetworkResourceMapOutput struct{ *pulumi.OutputState }

func (NetworkResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkResource)(nil)).Elem()
}

func (o NetworkResourceMapOutput) ToNetworkResourceMapOutput() NetworkResourceMapOutput {
	return o
}

func (o NetworkResourceMapOutput) ToNetworkResourceMapOutputWithContext(ctx context.Context) NetworkResourceMapOutput {
	return o
}

func (o NetworkResourceMapOutput) MapIndex(k pulumi.StringInput) NetworkResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkResource {
		return vs[0].(map[string]*NetworkResource)[vs[1].(string)]
	}).(NetworkResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkResourceInput)(nil)).Elem(), &NetworkResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkResourceArrayInput)(nil)).Elem(), NetworkResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkResourceMapInput)(nil)).Elem(), NetworkResourceMap{})
	pulumi.RegisterOutputType(NetworkResourceOutput{})
	pulumi.RegisterOutputType(NetworkResourceArrayOutput{})
	pulumi.RegisterOutputType(NetworkResourceMapOutput{})
}
