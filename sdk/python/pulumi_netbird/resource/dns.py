# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DNSArgs', 'DNS']

@pulumi.input_type
class DNSArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[builtins.str],
                 domains: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 enabled: pulumi.Input[builtins.bool],
                 groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 name: pulumi.Input[builtins.str],
                 nameservers: pulumi.Input[Sequence[pulumi.Input['NameserverArgs']]],
                 primary: pulumi.Input[builtins.bool],
                 search_domains_enabled: pulumi.Input[builtins.bool]):
        """
        The set of arguments for constructing a DNS resource.
        :param pulumi.Input[builtins.str] description: Description Description of the nameserver group
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domains: Domains Match domain list. It should be empty only if primary is true.
        :param pulumi.Input[builtins.bool] enabled: Enabled Nameserver group status
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: Groups Distribution group IDs that defines group of peers that will use this nameserver group
        :param pulumi.Input[builtins.str] name: Name Name of nameserver group name
        :param pulumi.Input[Sequence[pulumi.Input['NameserverArgs']]] nameservers: Nameservers Nameserver list
        :param pulumi.Input[builtins.bool] primary: Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
        :param pulumi.Input[builtins.bool] search_domains_enabled: SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nameservers", nameservers)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "search_domains_enabled", search_domains_enabled)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        """
        Description Description of the nameserver group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Domains Match domain list. It should be empty only if primary is true.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enabled Nameserver group status
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Groups Distribution group IDs that defines group of peers that will use this nameserver group
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name Name of nameserver group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nameservers(self) -> pulumi.Input[Sequence[pulumi.Input['NameserverArgs']]]:
        """
        Nameservers Nameserver list
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: pulumi.Input[Sequence[pulumi.Input['NameserverArgs']]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Input[builtins.bool]:
        """
        Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def search_domains_enabled(self) -> pulumi.Input[builtins.bool]:
        """
        SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
        """
        return pulumi.get(self, "search_domains_enabled")

    @search_domains_enabled.setter
    def search_domains_enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "search_domains_enabled", value)


@pulumi.type_token("netbird:resource:DNS")
class DNS(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NameserverArgs', 'NameserverArgsDict']]]]] = None,
                 primary: Optional[pulumi.Input[builtins.bool]] = None,
                 search_domains_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        A NetBird network.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: Description Description of the nameserver group
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domains: Domains Match domain list. It should be empty only if primary is true.
        :param pulumi.Input[builtins.bool] enabled: Enabled Nameserver group status
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: Groups Distribution group IDs that defines group of peers that will use this nameserver group
        :param pulumi.Input[builtins.str] name: Name Name of nameserver group name
        :param pulumi.Input[Sequence[pulumi.Input[Union['NameserverArgs', 'NameserverArgsDict']]]] nameservers: Nameservers Nameserver list
        :param pulumi.Input[builtins.bool] primary: Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
        :param pulumi.Input[builtins.bool] search_domains_enabled: SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DNSArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NetBird network.

        :param str resource_name: The name of the resource.
        :param DNSArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DNSArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NameserverArgs', 'NameserverArgsDict']]]]] = None,
                 primary: Optional[pulumi.Input[builtins.bool]] = None,
                 search_domains_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DNSArgs.__new__(DNSArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if groups is None and not opts.urn:
                raise TypeError("Missing required property 'groups'")
            __props__.__dict__["groups"] = groups
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if nameservers is None and not opts.urn:
                raise TypeError("Missing required property 'nameservers'")
            __props__.__dict__["nameservers"] = nameservers
            if primary is None and not opts.urn:
                raise TypeError("Missing required property 'primary'")
            __props__.__dict__["primary"] = primary
            if search_domains_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'search_domains_enabled'")
            __props__.__dict__["search_domains_enabled"] = search_domains_enabled
        super(DNS, __self__).__init__(
            'netbird:resource:DNS',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DNS':
        """
        Get an existing DNS resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DNSArgs.__new__(DNSArgs)

        __props__.__dict__["description"] = None
        __props__.__dict__["domains"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["groups"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["nameservers"] = None
        __props__.__dict__["primary"] = None
        __props__.__dict__["search_domains_enabled"] = None
        return DNS(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        Description Description of the nameserver group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Domains Match domain list. It should be empty only if primary is true.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enabled Nameserver group status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Groups Distribution group IDs that defines group of peers that will use this nameserver group
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name Name of nameserver group name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameservers(self) -> pulumi.Output[Sequence['outputs.Nameserver']]:
        """
        Nameservers Nameserver list
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[builtins.bool]:
        """
        Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def search_domains_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
        """
        return pulumi.get(self, "search_domains_enabled")

