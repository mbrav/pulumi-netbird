# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PeerArgs', 'Peer']

@pulumi.input_type
class PeerArgs:
    def __init__(__self__, *,
                 approval_required: pulumi.Input[builtins.bool],
                 inactivity_expiration_enabled: pulumi.Input[builtins.bool],
                 login_expiration_enabled: pulumi.Input[builtins.bool],
                 name: pulumi.Input[builtins.str],
                 ssh_enabled: pulumi.Input[builtins.bool]):
        """
        The set of arguments for constructing a Peer resource.
        :param pulumi.Input[builtins.bool] inactivity_expiration_enabled: Whether Inactivity Expiration is enabled.
        :param pulumi.Input[builtins.bool] login_expiration_enabled: Whether Login Expiration is enabled.
        :param pulumi.Input[builtins.str] name: The name of the peer.
        :param pulumi.Input[builtins.bool] ssh_enabled: Whether SSH is enabled.
        """
        if approval_required is not None:
            warnings.warn("""Cloud only, not maintained in this provider""", DeprecationWarning)
            pulumi.log.warn("""approval_required is deprecated: Cloud only, not maintained in this provider""")
        pulumi.set(__self__, "approval_required", approval_required)
        pulumi.set(__self__, "inactivity_expiration_enabled", inactivity_expiration_enabled)
        pulumi.set(__self__, "login_expiration_enabled", login_expiration_enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ssh_enabled", ssh_enabled)

    @property
    @pulumi.getter(name="approvalRequired")
    @_utilities.deprecated("""Cloud only, not maintained in this provider""")
    def approval_required(self) -> pulumi.Input[builtins.bool]:
        return pulumi.get(self, "approval_required")

    @approval_required.setter
    def approval_required(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "approval_required", value)

    @property
    @pulumi.getter(name="inactivityExpirationEnabled")
    def inactivity_expiration_enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether Inactivity Expiration is enabled.
        """
        return pulumi.get(self, "inactivity_expiration_enabled")

    @inactivity_expiration_enabled.setter
    def inactivity_expiration_enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "inactivity_expiration_enabled", value)

    @property
    @pulumi.getter(name="loginExpirationEnabled")
    def login_expiration_enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether Login Expiration is enabled.
        """
        return pulumi.get(self, "login_expiration_enabled")

    @login_expiration_enabled.setter
    def login_expiration_enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "login_expiration_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the peer.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sshEnabled")
    def ssh_enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether SSH is enabled.
        """
        return pulumi.get(self, "ssh_enabled")

    @ssh_enabled.setter
    def ssh_enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "ssh_enabled", value)


@pulumi.type_token("netbird:resource:Peer")
class Peer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_required: Optional[pulumi.Input[builtins.bool]] = None,
                 inactivity_expiration_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 login_expiration_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        A NetBird peer representing a connected device.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] inactivity_expiration_enabled: Whether Inactivity Expiration is enabled.
        :param pulumi.Input[builtins.bool] login_expiration_enabled: Whether Login Expiration is enabled.
        :param pulumi.Input[builtins.str] name: The name of the peer.
        :param pulumi.Input[builtins.bool] ssh_enabled: Whether SSH is enabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PeerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NetBird peer representing a connected device.

        :param str resource_name: The name of the resource.
        :param PeerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PeerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_required: Optional[pulumi.Input[builtins.bool]] = None,
                 inactivity_expiration_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 login_expiration_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PeerArgs.__new__(PeerArgs)

            if approval_required is None and not opts.urn:
                raise TypeError("Missing required property 'approval_required'")
            __props__.__dict__["approval_required"] = approval_required
            if inactivity_expiration_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'inactivity_expiration_enabled'")
            __props__.__dict__["inactivity_expiration_enabled"] = inactivity_expiration_enabled
            if login_expiration_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'login_expiration_enabled'")
            __props__.__dict__["login_expiration_enabled"] = login_expiration_enabled
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if ssh_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'ssh_enabled'")
            __props__.__dict__["ssh_enabled"] = ssh_enabled
        super(Peer, __self__).__init__(
            'netbird:resource:Peer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Peer':
        """
        Get an existing Peer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PeerArgs.__new__(PeerArgs)

        __props__.__dict__["approval_required"] = None
        __props__.__dict__["inactivity_expiration_enabled"] = None
        __props__.__dict__["login_expiration_enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["ssh_enabled"] = None
        return Peer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="approvalRequired")
    @_utilities.deprecated("""Cloud only, not maintained in this provider""")
    def approval_required(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "approval_required")

    @property
    @pulumi.getter(name="inactivityExpirationEnabled")
    def inactivity_expiration_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Whether Inactivity Expiration is enabled.
        """
        return pulumi.get(self, "inactivity_expiration_enabled")

    @property
    @pulumi.getter(name="loginExpirationEnabled")
    def login_expiration_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Whether Login Expiration is enabled.
        """
        return pulumi.get(self, "login_expiration_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the peer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sshEnabled")
    def ssh_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Whether SSH is enabled.
        """
        return pulumi.get(self, "ssh_enabled")

