// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbird

import (
	"context"
	"reflect"

	"errors"
	"github.com/mbrav/pulumi-netbird/sdk/go/netbird/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkRouter struct {
	pulumi.CustomResourceState

	Enabled     pulumi.BoolOutput        `pulumi:"enabled"`
	Masquerade  pulumi.BoolOutput        `pulumi:"masquerade"`
	Metric      pulumi.IntOutput         `pulumi:"metric"`
	NbId        pulumi.StringOutput      `pulumi:"nbId"`
	Network_id  pulumi.StringOutput      `pulumi:"network_id"`
	Peer        pulumi.StringOutput      `pulumi:"peer"`
	Peer_groups pulumi.StringArrayOutput `pulumi:"peer_groups"`
}

// NewNetworkRouter registers a new resource with the given unique name, arguments, and options.
func NewNetworkRouter(ctx *pulumi.Context,
	name string, args *NetworkRouterArgs, opts ...pulumi.ResourceOption) (*NetworkRouter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Masquerade == nil {
		return nil, errors.New("invalid value for required argument 'Masquerade'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.Network_id == nil {
		return nil, errors.New("invalid value for required argument 'Network_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkRouter
	err := ctx.RegisterResource("netbird:index:NetworkRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkRouter gets an existing NetworkRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkRouterState, opts ...pulumi.ResourceOption) (*NetworkRouter, error) {
	var resource NetworkRouter
	err := ctx.ReadResource("netbird:index:NetworkRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkRouter resources.
type networkRouterState struct {
}

type NetworkRouterState struct {
}

func (NetworkRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRouterState)(nil)).Elem()
}

type networkRouterArgs struct {
	Enabled     bool     `pulumi:"enabled"`
	Masquerade  bool     `pulumi:"masquerade"`
	Metric      int      `pulumi:"metric"`
	Network_id  string   `pulumi:"network_id"`
	Peer        *string  `pulumi:"peer"`
	Peer_groups []string `pulumi:"peer_groups"`
}

// The set of arguments for constructing a NetworkRouter resource.
type NetworkRouterArgs struct {
	Enabled     pulumi.BoolInput
	Masquerade  pulumi.BoolInput
	Metric      pulumi.IntInput
	Network_id  pulumi.StringInput
	Peer        pulumi.StringPtrInput
	Peer_groups pulumi.StringArrayInput
}

func (NetworkRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRouterArgs)(nil)).Elem()
}

type NetworkRouterInput interface {
	pulumi.Input

	ToNetworkRouterOutput() NetworkRouterOutput
	ToNetworkRouterOutputWithContext(ctx context.Context) NetworkRouterOutput
}

func (*NetworkRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRouter)(nil)).Elem()
}

func (i *NetworkRouter) ToNetworkRouterOutput() NetworkRouterOutput {
	return i.ToNetworkRouterOutputWithContext(context.Background())
}

func (i *NetworkRouter) ToNetworkRouterOutputWithContext(ctx context.Context) NetworkRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouterOutput)
}

// NetworkRouterArrayInput is an input type that accepts NetworkRouterArray and NetworkRouterArrayOutput values.
// You can construct a concrete instance of `NetworkRouterArrayInput` via:
//
//	NetworkRouterArray{ NetworkRouterArgs{...} }
type NetworkRouterArrayInput interface {
	pulumi.Input

	ToNetworkRouterArrayOutput() NetworkRouterArrayOutput
	ToNetworkRouterArrayOutputWithContext(context.Context) NetworkRouterArrayOutput
}

type NetworkRouterArray []NetworkRouterInput

func (NetworkRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRouter)(nil)).Elem()
}

func (i NetworkRouterArray) ToNetworkRouterArrayOutput() NetworkRouterArrayOutput {
	return i.ToNetworkRouterArrayOutputWithContext(context.Background())
}

func (i NetworkRouterArray) ToNetworkRouterArrayOutputWithContext(ctx context.Context) NetworkRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouterArrayOutput)
}

// NetworkRouterMapInput is an input type that accepts NetworkRouterMap and NetworkRouterMapOutput values.
// You can construct a concrete instance of `NetworkRouterMapInput` via:
//
//	NetworkRouterMap{ "key": NetworkRouterArgs{...} }
type NetworkRouterMapInput interface {
	pulumi.Input

	ToNetworkRouterMapOutput() NetworkRouterMapOutput
	ToNetworkRouterMapOutputWithContext(context.Context) NetworkRouterMapOutput
}

type NetworkRouterMap map[string]NetworkRouterInput

func (NetworkRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRouter)(nil)).Elem()
}

func (i NetworkRouterMap) ToNetworkRouterMapOutput() NetworkRouterMapOutput {
	return i.ToNetworkRouterMapOutputWithContext(context.Background())
}

func (i NetworkRouterMap) ToNetworkRouterMapOutputWithContext(ctx context.Context) NetworkRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouterMapOutput)
}

type NetworkRouterOutput struct{ *pulumi.OutputState }

func (NetworkRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRouter)(nil)).Elem()
}

func (o NetworkRouterOutput) ToNetworkRouterOutput() NetworkRouterOutput {
	return o
}

func (o NetworkRouterOutput) ToNetworkRouterOutputWithContext(ctx context.Context) NetworkRouterOutput {
	return o
}

func (o NetworkRouterOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o NetworkRouterOutput) Masquerade() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.BoolOutput { return v.Masquerade }).(pulumi.BoolOutput)
}

func (o NetworkRouterOutput) Metric() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.IntOutput { return v.Metric }).(pulumi.IntOutput)
}

func (o NetworkRouterOutput) NbId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.StringOutput { return v.NbId }).(pulumi.StringOutput)
}

func (o NetworkRouterOutput) Network_id() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.StringOutput { return v.Network_id }).(pulumi.StringOutput)
}

func (o NetworkRouterOutput) Peer() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.StringOutput { return v.Peer }).(pulumi.StringOutput)
}

func (o NetworkRouterOutput) Peer_groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkRouter) pulumi.StringArrayOutput { return v.Peer_groups }).(pulumi.StringArrayOutput)
}

type NetworkRouterArrayOutput struct{ *pulumi.OutputState }

func (NetworkRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRouter)(nil)).Elem()
}

func (o NetworkRouterArrayOutput) ToNetworkRouterArrayOutput() NetworkRouterArrayOutput {
	return o
}

func (o NetworkRouterArrayOutput) ToNetworkRouterArrayOutputWithContext(ctx context.Context) NetworkRouterArrayOutput {
	return o
}

func (o NetworkRouterArrayOutput) Index(i pulumi.IntInput) NetworkRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkRouter {
		return vs[0].([]*NetworkRouter)[vs[1].(int)]
	}).(NetworkRouterOutput)
}

type NetworkRouterMapOutput struct{ *pulumi.OutputState }

func (NetworkRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRouter)(nil)).Elem()
}

func (o NetworkRouterMapOutput) ToNetworkRouterMapOutput() NetworkRouterMapOutput {
	return o
}

func (o NetworkRouterMapOutput) ToNetworkRouterMapOutputWithContext(ctx context.Context) NetworkRouterMapOutput {
	return o
}

func (o NetworkRouterMapOutput) MapIndex(k pulumi.StringInput) NetworkRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkRouter {
		return vs[0].(map[string]*NetworkRouter)[vs[1].(string)]
	}).(NetworkRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouterInput)(nil)).Elem(), &NetworkRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouterArrayInput)(nil)).Elem(), NetworkRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouterMapInput)(nil)).Elem(), NetworkRouterMap{})
	pulumi.RegisterOutputType(NetworkRouterOutput{})
	pulumi.RegisterOutputType(NetworkRouterArrayOutput{})
	pulumi.RegisterOutputType(NetworkRouterMapOutput{})
}
