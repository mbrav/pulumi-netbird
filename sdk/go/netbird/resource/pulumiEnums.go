// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NameserverNsType string

const (
	// UDP type
	NameserverNsTypeUdp = NameserverNsType("udp")
)

func (NameserverNsType) ElementType() reflect.Type {
	return reflect.TypeOf((*NameserverNsType)(nil)).Elem()
}

func (e NameserverNsType) ToNameserverNsTypeOutput() NameserverNsTypeOutput {
	return pulumi.ToOutput(e).(NameserverNsTypeOutput)
}

func (e NameserverNsType) ToNameserverNsTypeOutputWithContext(ctx context.Context) NameserverNsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NameserverNsTypeOutput)
}

func (e NameserverNsType) ToNameserverNsTypePtrOutput() NameserverNsTypePtrOutput {
	return e.ToNameserverNsTypePtrOutputWithContext(context.Background())
}

func (e NameserverNsType) ToNameserverNsTypePtrOutputWithContext(ctx context.Context) NameserverNsTypePtrOutput {
	return NameserverNsType(e).ToNameserverNsTypeOutputWithContext(ctx).ToNameserverNsTypePtrOutputWithContext(ctx)
}

func (e NameserverNsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NameserverNsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NameserverNsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NameserverNsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NameserverNsTypeOutput struct{ *pulumi.OutputState }

func (NameserverNsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NameserverNsType)(nil)).Elem()
}

func (o NameserverNsTypeOutput) ToNameserverNsTypeOutput() NameserverNsTypeOutput {
	return o
}

func (o NameserverNsTypeOutput) ToNameserverNsTypeOutputWithContext(ctx context.Context) NameserverNsTypeOutput {
	return o
}

func (o NameserverNsTypeOutput) ToNameserverNsTypePtrOutput() NameserverNsTypePtrOutput {
	return o.ToNameserverNsTypePtrOutputWithContext(context.Background())
}

func (o NameserverNsTypeOutput) ToNameserverNsTypePtrOutputWithContext(ctx context.Context) NameserverNsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NameserverNsType) *NameserverNsType {
		return &v
	}).(NameserverNsTypePtrOutput)
}

func (o NameserverNsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NameserverNsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NameserverNsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NameserverNsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NameserverNsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NameserverNsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NameserverNsTypePtrOutput struct{ *pulumi.OutputState }

func (NameserverNsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NameserverNsType)(nil)).Elem()
}

func (o NameserverNsTypePtrOutput) ToNameserverNsTypePtrOutput() NameserverNsTypePtrOutput {
	return o
}

func (o NameserverNsTypePtrOutput) ToNameserverNsTypePtrOutputWithContext(ctx context.Context) NameserverNsTypePtrOutput {
	return o
}

func (o NameserverNsTypePtrOutput) Elem() NameserverNsTypeOutput {
	return o.ApplyT(func(v *NameserverNsType) NameserverNsType {
		if v != nil {
			return *v
		}
		var ret NameserverNsType
		return ret
	}).(NameserverNsTypeOutput)
}

func (o NameserverNsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NameserverNsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NameserverNsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NameserverNsTypeInput is an input type that accepts values of the NameserverNsType enum
// A concrete instance of `NameserverNsTypeInput` can be one of the following:
//
//	NameserverNsTypeUdp
type NameserverNsTypeInput interface {
	pulumi.Input

	ToNameserverNsTypeOutput() NameserverNsTypeOutput
	ToNameserverNsTypeOutputWithContext(context.Context) NameserverNsTypeOutput
}

var nameserverNsTypePtrType = reflect.TypeOf((**NameserverNsType)(nil)).Elem()

type NameserverNsTypePtrInput interface {
	pulumi.Input

	ToNameserverNsTypePtrOutput() NameserverNsTypePtrOutput
	ToNameserverNsTypePtrOutputWithContext(context.Context) NameserverNsTypePtrOutput
}

type nameserverNsTypePtr string

func NameserverNsTypePtr(v string) NameserverNsTypePtrInput {
	return (*nameserverNsTypePtr)(&v)
}

func (*nameserverNsTypePtr) ElementType() reflect.Type {
	return nameserverNsTypePtrType
}

func (in *nameserverNsTypePtr) ToNameserverNsTypePtrOutput() NameserverNsTypePtrOutput {
	return pulumi.ToOutput(in).(NameserverNsTypePtrOutput)
}

func (in *nameserverNsTypePtr) ToNameserverNsTypePtrOutputWithContext(ctx context.Context) NameserverNsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NameserverNsTypePtrOutput)
}

type Protocol string

const (
	// All protocols
	ProtocolAll = Protocol("all")
	// ICMP protocol
	ProtocolIcmp = Protocol("icmp")
	// TCP protocol
	ProtocolTcp = Protocol("tcp")
	// UDP protocol
	ProtocolUdp = Protocol("udp")
)

func (Protocol) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (e Protocol) ToProtocolOutput() ProtocolOutput {
	return pulumi.ToOutput(e).(ProtocolOutput)
}

func (e Protocol) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProtocolOutput)
}

func (e Protocol) ToProtocolPtrOutput() ProtocolPtrOutput {
	return e.ToProtocolPtrOutputWithContext(context.Background())
}

func (e Protocol) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return Protocol(e).ToProtocolOutputWithContext(ctx).ToProtocolPtrOutputWithContext(ctx)
}

func (e Protocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Protocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProtocolOutput struct{ *pulumi.OutputState }

func (ProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (o ProtocolOutput) ToProtocolOutput() ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o.ToProtocolPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Protocol) *Protocol {
		return &v
	}).(ProtocolPtrOutput)
}

func (o ProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProtocolPtrOutput struct{ *pulumi.OutputState }

func (ProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Protocol)(nil)).Elem()
}

func (o ProtocolPtrOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) Elem() ProtocolOutput {
	return o.ApplyT(func(v *Protocol) Protocol {
		if v != nil {
			return *v
		}
		var ret Protocol
		return ret
	}).(ProtocolOutput)
}

func (o ProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Protocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProtocolInput is an input type that accepts values of the Protocol enum
// A concrete instance of `ProtocolInput` can be one of the following:
//
//	ProtocolAll
//	ProtocolIcmp
//	ProtocolTcp
//	ProtocolUdp
type ProtocolInput interface {
	pulumi.Input

	ToProtocolOutput() ProtocolOutput
	ToProtocolOutputWithContext(context.Context) ProtocolOutput
}

var protocolPtrType = reflect.TypeOf((**Protocol)(nil)).Elem()

type ProtocolPtrInput interface {
	pulumi.Input

	ToProtocolPtrOutput() ProtocolPtrOutput
	ToProtocolPtrOutputWithContext(context.Context) ProtocolPtrOutput
}

type protocolPtr string

func ProtocolPtr(v string) ProtocolPtrInput {
	return (*protocolPtr)(&v)
}

func (*protocolPtr) ElementType() reflect.Type {
	return protocolPtrType
}

func (in *protocolPtr) ToProtocolPtrOutput() ProtocolPtrOutput {
	return pulumi.ToOutput(in).(ProtocolPtrOutput)
}

func (in *protocolPtr) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProtocolPtrOutput)
}

type RuleAction string

const (
	// Accept action
	RuleActionAccept = RuleAction("accept")
	// Drop action
	RuleActionDrop = RuleAction("drop")
)

func (RuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (e RuleAction) ToRuleActionOutput() RuleActionOutput {
	return pulumi.ToOutput(e).(RuleActionOutput)
}

func (e RuleAction) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RuleActionOutput)
}

func (e RuleAction) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return e.ToRuleActionPtrOutputWithContext(context.Background())
}

func (e RuleAction) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return RuleAction(e).ToRuleActionOutputWithContext(ctx).ToRuleActionPtrOutputWithContext(ctx)
}

func (e RuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RuleActionOutput struct{ *pulumi.OutputState }

func (RuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (o RuleActionOutput) ToRuleActionOutput() RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return o.ToRuleActionPtrOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleAction) *RuleAction {
		return &v
	}).(RuleActionPtrOutput)
}

func (o RuleActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RuleActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RuleActionPtrOutput struct{ *pulumi.OutputState }

func (RuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAction)(nil)).Elem()
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) Elem() RuleActionOutput {
	return o.ApplyT(func(v *RuleAction) RuleAction {
		if v != nil {
			return *v
		}
		var ret RuleAction
		return ret
	}).(RuleActionOutput)
}

func (o RuleActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RuleAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RuleActionInput is an input type that accepts values of the RuleAction enum
// A concrete instance of `RuleActionInput` can be one of the following:
//
//	RuleActionAccept
//	RuleActionDrop
type RuleActionInput interface {
	pulumi.Input

	ToRuleActionOutput() RuleActionOutput
	ToRuleActionOutputWithContext(context.Context) RuleActionOutput
}

var ruleActionPtrType = reflect.TypeOf((**RuleAction)(nil)).Elem()

type RuleActionPtrInput interface {
	pulumi.Input

	ToRuleActionPtrOutput() RuleActionPtrOutput
	ToRuleActionPtrOutputWithContext(context.Context) RuleActionPtrOutput
}

type ruleActionPtr string

func RuleActionPtr(v string) RuleActionPtrInput {
	return (*ruleActionPtr)(&v)
}

func (*ruleActionPtr) ElementType() reflect.Type {
	return ruleActionPtrType
}

func (in *ruleActionPtr) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return pulumi.ToOutput(in).(RuleActionPtrOutput)
}

func (in *ruleActionPtr) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RuleActionPtrOutput)
}

type Type string

const (
	// A domain resource (e.g., example.com).
	TypeDomain = Type("domain")
	// A host resource (e.g., peer or device).
	TypeHost = Type("host")
	// A subnet resource (e.g., 192.168.0.0/24).
	TypeSubnet = Type("subnet")
)

func (Type) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (e Type) ToTypeOutput() TypeOutput {
	return pulumi.ToOutput(e).(TypeOutput)
}

func (e Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeOutput)
}

func (e Type) ToTypePtrOutput() TypePtrOutput {
	return e.ToTypePtrOutputWithContext(context.Background())
}

func (e Type) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return Type(e).ToTypeOutputWithContext(ctx).ToTypePtrOutputWithContext(ctx)
}

func (e Type) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Type) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

func (o TypeOutput) ToTypePtrOutput() TypePtrOutput {
	return o.ToTypePtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Type) *Type {
		return &v
	}).(TypePtrOutput)
}

func (o TypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypePtrOutput struct{ *pulumi.OutputState }

func (TypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypePtrOutput) ToTypePtrOutput() TypePtrOutput {
	return o
}

func (o TypePtrOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o
}

func (o TypePtrOutput) Elem() TypeOutput {
	return o.ApplyT(func(v *Type) Type {
		if v != nil {
			return *v
		}
		var ret Type
		return ret
	}).(TypeOutput)
}

func (o TypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Type) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeInput is an input type that accepts values of the Type enum
// A concrete instance of `TypeInput` can be one of the following:
//
//	TypeDomain
//	TypeHost
//	TypeSubnet
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

var typePtrType = reflect.TypeOf((**Type)(nil)).Elem()

type TypePtrInput interface {
	pulumi.Input

	ToTypePtrOutput() TypePtrOutput
	ToTypePtrOutputWithContext(context.Context) TypePtrOutput
}

type typePtr string

func TypePtr(v string) TypePtrInput {
	return (*typePtr)(&v)
}

func (*typePtr) ElementType() reflect.Type {
	return typePtrType
}

func (in *typePtr) ToTypePtrOutput() TypePtrOutput {
	return pulumi.ToOutput(in).(TypePtrOutput)
}

func (in *typePtr) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NameserverNsTypeInput)(nil)).Elem(), NameserverNsType("udp"))
	pulumi.RegisterInputType(reflect.TypeOf((*NameserverNsTypePtrInput)(nil)).Elem(), NameserverNsType("udp"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProtocolInput)(nil)).Elem(), Protocol("all"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProtocolPtrInput)(nil)).Elem(), Protocol("all"))
	pulumi.RegisterInputType(reflect.TypeOf((*RuleActionInput)(nil)).Elem(), RuleAction("accept"))
	pulumi.RegisterInputType(reflect.TypeOf((*RuleActionPtrInput)(nil)).Elem(), RuleAction("accept"))
	pulumi.RegisterInputType(reflect.TypeOf((*TypeInput)(nil)).Elem(), Type("domain"))
	pulumi.RegisterInputType(reflect.TypeOf((*TypePtrInput)(nil)).Elem(), Type("domain"))
	pulumi.RegisterOutputType(NameserverNsTypeOutput{})
	pulumi.RegisterOutputType(NameserverNsTypePtrOutput{})
	pulumi.RegisterOutputType(ProtocolOutput{})
	pulumi.RegisterOutputType(ProtocolPtrOutput{})
	pulumi.RegisterOutputType(RuleActionOutput{})
	pulumi.RegisterOutputType(RuleActionPtrOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypePtrOutput{})
}
