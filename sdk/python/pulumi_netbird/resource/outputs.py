# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Nameserver',
    'PolicyRuleState',
    'Resource',
    'RuleGroup',
    'RulePortRange',
]

@pulumi.output_type
class Nameserver(dict):
    def __init__(__self__, *,
                 ip: builtins.str,
                 port: builtins.int,
                 type: 'NameserverNsType'):
        """
        :param builtins.str ip: IP of Nameserver
        :param builtins.int port: Port Nameserver Port
        :param 'NameserverNsType' type: NsType Nameserver Type
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        """
        IP of Nameserver
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Port Nameserver Port
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> 'NameserverNsType':
        """
        NsType Nameserver Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PolicyRuleState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationResource":
            suggest = "destination_resource"
        elif key == "portRanges":
            suggest = "port_ranges"
        elif key == "sourceResource":
            suggest = "source_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyRuleState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyRuleState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyRuleState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'RuleAction',
                 bidirectional: builtins.bool,
                 enabled: builtins.bool,
                 name: builtins.str,
                 protocol: 'Protocol',
                 description: Optional[builtins.str] = None,
                 destination_resource: Optional['outputs.Resource'] = None,
                 destinations: Optional[Sequence['outputs.RuleGroup']] = None,
                 id: Optional[builtins.str] = None,
                 port_ranges: Optional[Sequence['outputs.RulePortRange']] = None,
                 ports: Optional[Sequence[builtins.str]] = None,
                 source_resource: Optional['outputs.Resource'] = None,
                 sources: Optional[Sequence['outputs.RuleGroup']] = None):
        """
        :param 'RuleAction' action: Action Policy rule accept or drops packets
        :param builtins.bool bidirectional: Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
        :param builtins.bool enabled: Enabled Policy rule status
        :param builtins.str name: Name Policy rule name identifier
        :param 'Protocol' protocol: Protocol Policy rule type of the traffic
        :param builtins.str description: Description Policy rule friendly description
        :param 'Resource' destination_resource: DestinationResource for the rule 
        :param Sequence['RuleGroup'] destinations: Destinations Policy rule destination group IDs
        :param builtins.str id: ID Policy rule.
        :param Sequence['RulePortRange'] port_ranges: PortRanges Policy rule affected ports ranges list
        :param Sequence[builtins.str] ports: Ports Policy rule affected ports
        :param 'Resource' source_resource: SourceResource for the rule
        :param Sequence['RuleGroup'] sources: Sources Policy rule source group IDs
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bidirectional", bidirectional)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_resource is not None:
            pulumi.set(__self__, "destination_resource", destination_resource)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if source_resource is not None:
            pulumi.set(__self__, "source_resource", source_resource)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def action(self) -> 'RuleAction':
        """
        Action Policy rule accept or drops packets
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bidirectional(self) -> builtins.bool:
        """
        Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
        """
        return pulumi.get(self, "bidirectional")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enabled Policy rule status
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name Policy rule name identifier
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> 'Protocol':
        """
        Protocol Policy rule type of the traffic
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Description Policy rule friendly description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationResource")
    def destination_resource(self) -> Optional['outputs.Resource']:
        """
        DestinationResource for the rule 
        """
        return pulumi.get(self, "destination_resource")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.RuleGroup']]:
        """
        Destinations Policy rule destination group IDs
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        ID Policy rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.RulePortRange']]:
        """
        PortRanges Policy rule affected ports ranges list
        """
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.str]]:
        """
        Ports Policy rule affected ports
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="sourceResource")
    def source_resource(self) -> Optional['outputs.Resource']:
        """
        SourceResource for the rule
        """
        return pulumi.get(self, "source_resource")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.RuleGroup']]:
        """
        Sources Policy rule source group IDs
        """
        return pulumi.get(self, "sources")


@pulumi.output_type
class Resource(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 type: 'Type'):
        """
        :param builtins.str id: The unique identifier of the resource.
        :param 'Type' type: The type of resource: 'domain', 'host', or 'subnet'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> 'Type':
        """
        The type of resource: 'domain', 'host', or 'subnet'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RuleGroup(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str id: The unique identifier of the group.
        :param builtins.str name: The name of the group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RulePortRange(dict):
    def __init__(__self__, *,
                 end: builtins.int,
                 start: builtins.int):
        """
        :param builtins.int end: End of port range
        :param builtins.int start: Start of port range
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> builtins.int:
        """
        End of port range
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> builtins.int:
        """
        Start of port range
        """
        return pulumi.get(self, "start")


