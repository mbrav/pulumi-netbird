// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbird

import (
	"context"
	"reflect"

	"errors"
	"github.com/mbrav/pulumi-netbird/sdk/go/netbird/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Peer struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput `pulumi:"name"`
	PeerId     pulumi.StringOutput `pulumi:"peerId"`
	SshEnabled pulumi.BoolOutput   `pulumi:"sshEnabled"`
}

// NewPeer registers a new resource with the given unique name, arguments, and options.
func NewPeer(ctx *pulumi.Context,
	name string, args *PeerArgs, opts ...pulumi.ResourceOption) (*Peer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerId == nil {
		return nil, errors.New("invalid value for required argument 'PeerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Peer
	err := ctx.RegisterResource("netbird:index:Peer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeer gets an existing Peer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerState, opts ...pulumi.ResourceOption) (*Peer, error) {
	var resource Peer
	err := ctx.ReadResource("netbird:index:Peer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peer resources.
type peerState struct {
}

type PeerState struct {
}

func (PeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerState)(nil)).Elem()
}

type peerArgs struct {
	PeerId string `pulumi:"peerId"`
}

// The set of arguments for constructing a Peer resource.
type PeerArgs struct {
	PeerId pulumi.StringInput
}

func (PeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerArgs)(nil)).Elem()
}

type PeerInput interface {
	pulumi.Input

	ToPeerOutput() PeerOutput
	ToPeerOutputWithContext(ctx context.Context) PeerOutput
}

func (*Peer) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (i *Peer) ToPeerOutput() PeerOutput {
	return i.ToPeerOutputWithContext(context.Background())
}

func (i *Peer) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerOutput)
}

// PeerArrayInput is an input type that accepts PeerArray and PeerArrayOutput values.
// You can construct a concrete instance of `PeerArrayInput` via:
//
//	PeerArray{ PeerArgs{...} }
type PeerArrayInput interface {
	pulumi.Input

	ToPeerArrayOutput() PeerArrayOutput
	ToPeerArrayOutputWithContext(context.Context) PeerArrayOutput
}

type PeerArray []PeerInput

func (PeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (i PeerArray) ToPeerArrayOutput() PeerArrayOutput {
	return i.ToPeerArrayOutputWithContext(context.Background())
}

func (i PeerArray) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerArrayOutput)
}

// PeerMapInput is an input type that accepts PeerMap and PeerMapOutput values.
// You can construct a concrete instance of `PeerMapInput` via:
//
//	PeerMap{ "key": PeerArgs{...} }
type PeerMapInput interface {
	pulumi.Input

	ToPeerMapOutput() PeerMapOutput
	ToPeerMapOutputWithContext(context.Context) PeerMapOutput
}

type PeerMap map[string]PeerInput

func (PeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (i PeerMap) ToPeerMapOutput() PeerMapOutput {
	return i.ToPeerMapOutputWithContext(context.Background())
}

func (i PeerMap) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerMapOutput)
}

type PeerOutput struct{ *pulumi.OutputState }

func (PeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Peer)(nil)).Elem()
}

func (o PeerOutput) ToPeerOutput() PeerOutput {
	return o
}

func (o PeerOutput) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return o
}

func (o PeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PeerOutput) PeerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peer) pulumi.StringOutput { return v.PeerId }).(pulumi.StringOutput)
}

func (o PeerOutput) SshEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Peer) pulumi.BoolOutput { return v.SshEnabled }).(pulumi.BoolOutput)
}

type PeerArrayOutput struct{ *pulumi.OutputState }

func (PeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peer)(nil)).Elem()
}

func (o PeerArrayOutput) ToPeerArrayOutput() PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) ToPeerArrayOutputWithContext(ctx context.Context) PeerArrayOutput {
	return o
}

func (o PeerArrayOutput) Index(i pulumi.IntInput) PeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].([]*Peer)[vs[1].(int)]
	}).(PeerOutput)
}

type PeerMapOutput struct{ *pulumi.OutputState }

func (PeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peer)(nil)).Elem()
}

func (o PeerMapOutput) ToPeerMapOutput() PeerMapOutput {
	return o
}

func (o PeerMapOutput) ToPeerMapOutputWithContext(ctx context.Context) PeerMapOutput {
	return o
}

func (o PeerMapOutput) MapIndex(k pulumi.StringInput) PeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Peer {
		return vs[0].(map[string]*Peer)[vs[1].(string)]
	}).(PeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerInput)(nil)).Elem(), &Peer{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerArrayInput)(nil)).Elem(), PeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerMapInput)(nil)).Elem(), PeerMap{})
	pulumi.RegisterOutputType(PeerOutput{})
	pulumi.RegisterOutputType(PeerArrayOutput{})
	pulumi.RegisterOutputType(PeerMapOutput{})
}
