// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"github.com/mbrav/pulumi-netbird/sdk/go/netbird/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Nameserver struct {
	// Ip Nameserver IP
	Ip string `pulumi:"ip"`
	// Port Nameserver Port
	Port int `pulumi:"port"`
	// NsType Nameserver Type
	Type NameserverNsType `pulumi:"type"`
}

// NameserverInput is an input type that accepts NameserverArgs and NameserverOutput values.
// You can construct a concrete instance of `NameserverInput` via:
//
//	NameserverArgs{...}
type NameserverInput interface {
	pulumi.Input

	ToNameserverOutput() NameserverOutput
	ToNameserverOutputWithContext(context.Context) NameserverOutput
}

type NameserverArgs struct {
	// Ip Nameserver IP
	Ip pulumi.StringInput `pulumi:"ip"`
	// Port Nameserver Port
	Port pulumi.IntInput `pulumi:"port"`
	// NsType Nameserver Type
	Type NameserverNsTypeInput `pulumi:"type"`
}

func (NameserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nameserver)(nil)).Elem()
}

func (i NameserverArgs) ToNameserverOutput() NameserverOutput {
	return i.ToNameserverOutputWithContext(context.Background())
}

func (i NameserverArgs) ToNameserverOutputWithContext(ctx context.Context) NameserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameserverOutput)
}

// NameserverArrayInput is an input type that accepts NameserverArray and NameserverArrayOutput values.
// You can construct a concrete instance of `NameserverArrayInput` via:
//
//	NameserverArray{ NameserverArgs{...} }
type NameserverArrayInput interface {
	pulumi.Input

	ToNameserverArrayOutput() NameserverArrayOutput
	ToNameserverArrayOutputWithContext(context.Context) NameserverArrayOutput
}

type NameserverArray []NameserverInput

func (NameserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Nameserver)(nil)).Elem()
}

func (i NameserverArray) ToNameserverArrayOutput() NameserverArrayOutput {
	return i.ToNameserverArrayOutputWithContext(context.Background())
}

func (i NameserverArray) ToNameserverArrayOutputWithContext(ctx context.Context) NameserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameserverArrayOutput)
}

type NameserverOutput struct{ *pulumi.OutputState }

func (NameserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nameserver)(nil)).Elem()
}

func (o NameserverOutput) ToNameserverOutput() NameserverOutput {
	return o
}

func (o NameserverOutput) ToNameserverOutputWithContext(ctx context.Context) NameserverOutput {
	return o
}

// Ip Nameserver IP
func (o NameserverOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v Nameserver) string { return v.Ip }).(pulumi.StringOutput)
}

// Port Nameserver Port
func (o NameserverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Nameserver) int { return v.Port }).(pulumi.IntOutput)
}

// NsType Nameserver Type
func (o NameserverOutput) Type() NameserverNsTypeOutput {
	return o.ApplyT(func(v Nameserver) NameserverNsType { return v.Type }).(NameserverNsTypeOutput)
}

type NameserverArrayOutput struct{ *pulumi.OutputState }

func (NameserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Nameserver)(nil)).Elem()
}

func (o NameserverArrayOutput) ToNameserverArrayOutput() NameserverArrayOutput {
	return o
}

func (o NameserverArrayOutput) ToNameserverArrayOutputWithContext(ctx context.Context) NameserverArrayOutput {
	return o
}

func (o NameserverArrayOutput) Index(i pulumi.IntInput) NameserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Nameserver {
		return vs[0].([]Nameserver)[vs[1].(int)]
	}).(NameserverOutput)
}

type PolicyRuleArgs struct {
	// Action Policy rule accept or drops packets
	Action RuleAction `pulumi:"action"`
	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `pulumi:"bidirectional"`
	// Description Policy rule friendly description
	Description *string `pulumi:"description"`
	// DestinationResource for the rule
	DestinationResource *Resource `pulumi:"destinationResource"`
	// Destinations Policy rule destination group IDs
	Destinations []string `pulumi:"destinations"`
	// Enabled Policy rule status
	Enabled bool `pulumi:"enabled"`
	// ID Policy rule.
	Id *string `pulumi:"id"`
	// Name Policy rule name identifier
	Name string `pulumi:"name"`
	// PortRanges Policy rule affected ports ranges list
	PortRanges []RulePortRange `pulumi:"portRanges"`
	// Ports Policy rule affected ports
	Ports []string `pulumi:"ports"`
	// Protocol Policy rule type of the traffic
	Protocol Protocol `pulumi:"protocol"`
	// SourceResource for the rule
	SourceResource *Resource `pulumi:"sourceResource"`
	// Sources Policy rule source group IDs
	Sources []string `pulumi:"sources"`
}

// PolicyRuleArgsInput is an input type that accepts PolicyRuleArgsArgs and PolicyRuleArgsOutput values.
// You can construct a concrete instance of `PolicyRuleArgsInput` via:
//
//	PolicyRuleArgsArgs{...}
type PolicyRuleArgsInput interface {
	pulumi.Input

	ToPolicyRuleArgsOutput() PolicyRuleArgsOutput
	ToPolicyRuleArgsOutputWithContext(context.Context) PolicyRuleArgsOutput
}

type PolicyRuleArgsArgs struct {
	// Action Policy rule accept or drops packets
	Action RuleActionInput `pulumi:"action"`
	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional pulumi.BoolInput `pulumi:"bidirectional"`
	// Description Policy rule friendly description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// DestinationResource for the rule
	DestinationResource ResourcePtrInput `pulumi:"destinationResource"`
	// Destinations Policy rule destination group IDs
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// Enabled Policy rule status
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// ID Policy rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name Policy rule name identifier
	Name pulumi.StringInput `pulumi:"name"`
	// PortRanges Policy rule affected ports ranges list
	PortRanges RulePortRangeArrayInput `pulumi:"portRanges"`
	// Ports Policy rule affected ports
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// Protocol Policy rule type of the traffic
	Protocol ProtocolInput `pulumi:"protocol"`
	// SourceResource for the rule
	SourceResource ResourcePtrInput `pulumi:"sourceResource"`
	// Sources Policy rule source group IDs
	Sources pulumi.StringArrayInput `pulumi:"sources"`
}

func (PolicyRuleArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleArgs)(nil)).Elem()
}

func (i PolicyRuleArgsArgs) ToPolicyRuleArgsOutput() PolicyRuleArgsOutput {
	return i.ToPolicyRuleArgsOutputWithContext(context.Background())
}

func (i PolicyRuleArgsArgs) ToPolicyRuleArgsOutputWithContext(ctx context.Context) PolicyRuleArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArgsOutput)
}

// PolicyRuleArgsArrayInput is an input type that accepts PolicyRuleArgsArray and PolicyRuleArgsArrayOutput values.
// You can construct a concrete instance of `PolicyRuleArgsArrayInput` via:
//
//	PolicyRuleArgsArray{ PolicyRuleArgsArgs{...} }
type PolicyRuleArgsArrayInput interface {
	pulumi.Input

	ToPolicyRuleArgsArrayOutput() PolicyRuleArgsArrayOutput
	ToPolicyRuleArgsArrayOutputWithContext(context.Context) PolicyRuleArgsArrayOutput
}

type PolicyRuleArgsArray []PolicyRuleArgsInput

func (PolicyRuleArgsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleArgs)(nil)).Elem()
}

func (i PolicyRuleArgsArray) ToPolicyRuleArgsArrayOutput() PolicyRuleArgsArrayOutput {
	return i.ToPolicyRuleArgsArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArgsArray) ToPolicyRuleArgsArrayOutputWithContext(ctx context.Context) PolicyRuleArgsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArgsArrayOutput)
}

type PolicyRuleArgsOutput struct{ *pulumi.OutputState }

func (PolicyRuleArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleArgs)(nil)).Elem()
}

func (o PolicyRuleArgsOutput) ToPolicyRuleArgsOutput() PolicyRuleArgsOutput {
	return o
}

func (o PolicyRuleArgsOutput) ToPolicyRuleArgsOutputWithContext(ctx context.Context) PolicyRuleArgsOutput {
	return o
}

// Action Policy rule accept or drops packets
func (o PolicyRuleArgsOutput) Action() RuleActionOutput {
	return o.ApplyT(func(v PolicyRuleArgs) RuleAction { return v.Action }).(RuleActionOutput)
}

// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
func (o PolicyRuleArgsOutput) Bidirectional() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyRuleArgs) bool { return v.Bidirectional }).(pulumi.BoolOutput)
}

// Description Policy rule friendly description
func (o PolicyRuleArgsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleArgs) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DestinationResource for the rule
func (o PolicyRuleArgsOutput) DestinationResource() ResourcePtrOutput {
	return o.ApplyT(func(v PolicyRuleArgs) *Resource { return v.DestinationResource }).(ResourcePtrOutput)
}

// Destinations Policy rule destination group IDs
func (o PolicyRuleArgsOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRuleArgs) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// Enabled Policy rule status
func (o PolicyRuleArgsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyRuleArgs) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ID Policy rule.
func (o PolicyRuleArgsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleArgs) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name Policy rule name identifier
func (o PolicyRuleArgsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyRuleArgs) string { return v.Name }).(pulumi.StringOutput)
}

// PortRanges Policy rule affected ports ranges list
func (o PolicyRuleArgsOutput) PortRanges() RulePortRangeArrayOutput {
	return o.ApplyT(func(v PolicyRuleArgs) []RulePortRange { return v.PortRanges }).(RulePortRangeArrayOutput)
}

// Ports Policy rule affected ports
func (o PolicyRuleArgsOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRuleArgs) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// Protocol Policy rule type of the traffic
func (o PolicyRuleArgsOutput) Protocol() ProtocolOutput {
	return o.ApplyT(func(v PolicyRuleArgs) Protocol { return v.Protocol }).(ProtocolOutput)
}

// SourceResource for the rule
func (o PolicyRuleArgsOutput) SourceResource() ResourcePtrOutput {
	return o.ApplyT(func(v PolicyRuleArgs) *Resource { return v.SourceResource }).(ResourcePtrOutput)
}

// Sources Policy rule source group IDs
func (o PolicyRuleArgsOutput) Sources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRuleArgs) []string { return v.Sources }).(pulumi.StringArrayOutput)
}

type PolicyRuleArgsArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleArgsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleArgs)(nil)).Elem()
}

func (o PolicyRuleArgsArrayOutput) ToPolicyRuleArgsArrayOutput() PolicyRuleArgsArrayOutput {
	return o
}

func (o PolicyRuleArgsArrayOutput) ToPolicyRuleArgsArrayOutputWithContext(ctx context.Context) PolicyRuleArgsArrayOutput {
	return o
}

func (o PolicyRuleArgsArrayOutput) Index(i pulumi.IntInput) PolicyRuleArgsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRuleArgs {
		return vs[0].([]PolicyRuleArgs)[vs[1].(int)]
	}).(PolicyRuleArgsOutput)
}

type PolicyRuleState struct {
	// Action Policy rule accept or drops packets
	Action RuleAction `pulumi:"action"`
	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `pulumi:"bidirectional"`
	// Description Policy rule friendly description
	Description *string `pulumi:"description"`
	// DestinationResource for the rule
	DestinationResource *Resource `pulumi:"destinationResource"`
	// Destinations Policy rule destination group IDs
	Destinations []RuleGroup `pulumi:"destinations"`
	// Enabled Policy rule status
	Enabled bool `pulumi:"enabled"`
	// ID Policy rule.
	Id *string `pulumi:"id"`
	// Name Policy rule name identifier
	Name string `pulumi:"name"`
	// PortRanges Policy rule affected ports ranges list
	PortRanges []RulePortRange `pulumi:"portRanges"`
	// Ports Policy rule affected ports
	Ports []string `pulumi:"ports"`
	// Protocol Policy rule type of the traffic
	Protocol Protocol `pulumi:"protocol"`
	// SourceResource for the rule
	SourceResource *Resource `pulumi:"sourceResource"`
	// Sources Policy rule source group IDs
	Sources []RuleGroup `pulumi:"sources"`
}

type PolicyRuleStateOutput struct{ *pulumi.OutputState }

func (PolicyRuleStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleState)(nil)).Elem()
}

func (o PolicyRuleStateOutput) ToPolicyRuleStateOutput() PolicyRuleStateOutput {
	return o
}

func (o PolicyRuleStateOutput) ToPolicyRuleStateOutputWithContext(ctx context.Context) PolicyRuleStateOutput {
	return o
}

// Action Policy rule accept or drops packets
func (o PolicyRuleStateOutput) Action() RuleActionOutput {
	return o.ApplyT(func(v PolicyRuleState) RuleAction { return v.Action }).(RuleActionOutput)
}

// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
func (o PolicyRuleStateOutput) Bidirectional() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyRuleState) bool { return v.Bidirectional }).(pulumi.BoolOutput)
}

// Description Policy rule friendly description
func (o PolicyRuleStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DestinationResource for the rule
func (o PolicyRuleStateOutput) DestinationResource() ResourcePtrOutput {
	return o.ApplyT(func(v PolicyRuleState) *Resource { return v.DestinationResource }).(ResourcePtrOutput)
}

// Destinations Policy rule destination group IDs
func (o PolicyRuleStateOutput) Destinations() RuleGroupArrayOutput {
	return o.ApplyT(func(v PolicyRuleState) []RuleGroup { return v.Destinations }).(RuleGroupArrayOutput)
}

// Enabled Policy rule status
func (o PolicyRuleStateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyRuleState) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ID Policy rule.
func (o PolicyRuleStateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleState) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name Policy rule name identifier
func (o PolicyRuleStateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyRuleState) string { return v.Name }).(pulumi.StringOutput)
}

// PortRanges Policy rule affected ports ranges list
func (o PolicyRuleStateOutput) PortRanges() RulePortRangeArrayOutput {
	return o.ApplyT(func(v PolicyRuleState) []RulePortRange { return v.PortRanges }).(RulePortRangeArrayOutput)
}

// Ports Policy rule affected ports
func (o PolicyRuleStateOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRuleState) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// Protocol Policy rule type of the traffic
func (o PolicyRuleStateOutput) Protocol() ProtocolOutput {
	return o.ApplyT(func(v PolicyRuleState) Protocol { return v.Protocol }).(ProtocolOutput)
}

// SourceResource for the rule
func (o PolicyRuleStateOutput) SourceResource() ResourcePtrOutput {
	return o.ApplyT(func(v PolicyRuleState) *Resource { return v.SourceResource }).(ResourcePtrOutput)
}

// Sources Policy rule source group IDs
func (o PolicyRuleStateOutput) Sources() RuleGroupArrayOutput {
	return o.ApplyT(func(v PolicyRuleState) []RuleGroup { return v.Sources }).(RuleGroupArrayOutput)
}

type PolicyRuleStateArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleState)(nil)).Elem()
}

func (o PolicyRuleStateArrayOutput) ToPolicyRuleStateArrayOutput() PolicyRuleStateArrayOutput {
	return o
}

func (o PolicyRuleStateArrayOutput) ToPolicyRuleStateArrayOutputWithContext(ctx context.Context) PolicyRuleStateArrayOutput {
	return o
}

func (o PolicyRuleStateArrayOutput) Index(i pulumi.IntInput) PolicyRuleStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRuleState {
		return vs[0].([]PolicyRuleState)[vs[1].(int)]
	}).(PolicyRuleStateOutput)
}

type Resource struct {
	// The unique identifier of the resource.
	Id string `pulumi:"id"`
	// The type of resource: 'domain', 'host', or 'subnet'.
	Type ResourceType `pulumi:"type"`
}

// ResourceInput is an input type that accepts ResourceArgs and ResourceOutput values.
// You can construct a concrete instance of `ResourceInput` via:
//
//	ResourceArgs{...}
type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(context.Context) ResourceOutput
}

type ResourceArgs struct {
	// The unique identifier of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of resource: 'domain', 'host', or 'subnet'.
	Type ResourceTypeInput `pulumi:"type"`
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (i ResourceArgs) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

func (i ResourceArgs) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i ResourceArgs) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput).ToResourcePtrOutputWithContext(ctx)
}

// ResourcePtrInput is an input type that accepts ResourceArgs, ResourcePtr and ResourcePtrOutput values.
// You can construct a concrete instance of `ResourcePtrInput` via:
//
//	        ResourceArgs{...}
//
//	or:
//
//	        nil
type ResourcePtrInput interface {
	pulumi.Input

	ToResourcePtrOutput() ResourcePtrOutput
	ToResourcePtrOutputWithContext(context.Context) ResourcePtrOutput
}

type resourcePtrType ResourceArgs

func ResourcePtr(v *ResourceArgs) ResourcePtrInput {
	return (*resourcePtrType)(v)
}

func (*resourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *resourcePtrType) ToResourcePtrOutput() ResourcePtrOutput {
	return i.ToResourcePtrOutputWithContext(context.Background())
}

func (i *resourcePtrType) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePtrOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//	ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o.ToResourcePtrOutputWithContext(context.Background())
}

func (o ResourceOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Resource) *Resource {
		return &v
	}).(ResourcePtrOutput)
}

// The unique identifier of the resource.
func (o ResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Resource) string { return v.Id }).(pulumi.StringOutput)
}

// The type of resource: 'domain', 'host', or 'subnet'.
func (o ResourceOutput) Type() ResourceTypeOutput {
	return o.ApplyT(func(v Resource) ResourceType { return v.Type }).(ResourceTypeOutput)
}

type ResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourcePtrOutput) ToResourcePtrOutput() ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) ToResourcePtrOutputWithContext(ctx context.Context) ResourcePtrOutput {
	return o
}

func (o ResourcePtrOutput) Elem() ResourceOutput {
	return o.ApplyT(func(v *Resource) Resource {
		if v != nil {
			return *v
		}
		var ret Resource
		return ret
	}).(ResourceOutput)
}

// The unique identifier of the resource.
func (o ResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of resource: 'domain', 'host', or 'subnet'.
func (o ResourcePtrOutput) Type() ResourceTypePtrOutput {
	return o.ApplyT(func(v *Resource) *ResourceType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ResourceTypePtrOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Resource {
		return vs[0].([]Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type RuleGroup struct {
	// The unique identifier of the group.
	Id string `pulumi:"id"`
	// The name of the group.
	Name string `pulumi:"name"`
}

type RuleGroupOutput struct{ *pulumi.OutputState }

func (RuleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroup)(nil)).Elem()
}

func (o RuleGroupOutput) ToRuleGroupOutput() RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToRuleGroupOutputWithContext(ctx context.Context) RuleGroupOutput {
	return o
}

// The unique identifier of the group.
func (o RuleGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the group.
func (o RuleGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroup) string { return v.Name }).(pulumi.StringOutput)
}

type RuleGroupArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroup)(nil)).Elem()
}

func (o RuleGroupArrayOutput) ToRuleGroupArrayOutput() RuleGroupArrayOutput {
	return o
}

func (o RuleGroupArrayOutput) ToRuleGroupArrayOutputWithContext(ctx context.Context) RuleGroupArrayOutput {
	return o
}

func (o RuleGroupArrayOutput) Index(i pulumi.IntInput) RuleGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroup {
		return vs[0].([]RuleGroup)[vs[1].(int)]
	}).(RuleGroupOutput)
}

type RulePortRange struct {
	// End of port range
	End int `pulumi:"end"`
	// Start of port range
	Start int `pulumi:"start"`
}

// RulePortRangeInput is an input type that accepts RulePortRangeArgs and RulePortRangeOutput values.
// You can construct a concrete instance of `RulePortRangeInput` via:
//
//	RulePortRangeArgs{...}
type RulePortRangeInput interface {
	pulumi.Input

	ToRulePortRangeOutput() RulePortRangeOutput
	ToRulePortRangeOutputWithContext(context.Context) RulePortRangeOutput
}

type RulePortRangeArgs struct {
	// End of port range
	End pulumi.IntInput `pulumi:"end"`
	// Start of port range
	Start pulumi.IntInput `pulumi:"start"`
}

func (RulePortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePortRange)(nil)).Elem()
}

func (i RulePortRangeArgs) ToRulePortRangeOutput() RulePortRangeOutput {
	return i.ToRulePortRangeOutputWithContext(context.Background())
}

func (i RulePortRangeArgs) ToRulePortRangeOutputWithContext(ctx context.Context) RulePortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePortRangeOutput)
}

// RulePortRangeArrayInput is an input type that accepts RulePortRangeArray and RulePortRangeArrayOutput values.
// You can construct a concrete instance of `RulePortRangeArrayInput` via:
//
//	RulePortRangeArray{ RulePortRangeArgs{...} }
type RulePortRangeArrayInput interface {
	pulumi.Input

	ToRulePortRangeArrayOutput() RulePortRangeArrayOutput
	ToRulePortRangeArrayOutputWithContext(context.Context) RulePortRangeArrayOutput
}

type RulePortRangeArray []RulePortRangeInput

func (RulePortRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePortRange)(nil)).Elem()
}

func (i RulePortRangeArray) ToRulePortRangeArrayOutput() RulePortRangeArrayOutput {
	return i.ToRulePortRangeArrayOutputWithContext(context.Background())
}

func (i RulePortRangeArray) ToRulePortRangeArrayOutputWithContext(ctx context.Context) RulePortRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePortRangeArrayOutput)
}

type RulePortRangeOutput struct{ *pulumi.OutputState }

func (RulePortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePortRange)(nil)).Elem()
}

func (o RulePortRangeOutput) ToRulePortRangeOutput() RulePortRangeOutput {
	return o
}

func (o RulePortRangeOutput) ToRulePortRangeOutputWithContext(ctx context.Context) RulePortRangeOutput {
	return o
}

// End of port range
func (o RulePortRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v RulePortRange) int { return v.End }).(pulumi.IntOutput)
}

// Start of port range
func (o RulePortRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v RulePortRange) int { return v.Start }).(pulumi.IntOutput)
}

type RulePortRangeArrayOutput struct{ *pulumi.OutputState }

func (RulePortRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePortRange)(nil)).Elem()
}

func (o RulePortRangeArrayOutput) ToRulePortRangeArrayOutput() RulePortRangeArrayOutput {
	return o
}

func (o RulePortRangeArrayOutput) ToRulePortRangeArrayOutputWithContext(ctx context.Context) RulePortRangeArrayOutput {
	return o
}

func (o RulePortRangeArrayOutput) Index(i pulumi.IntInput) RulePortRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulePortRange {
		return vs[0].([]RulePortRange)[vs[1].(int)]
	}).(RulePortRangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NameserverInput)(nil)).Elem(), NameserverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameserverArrayInput)(nil)).Elem(), NameserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleArgsInput)(nil)).Elem(), PolicyRuleArgsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleArgsArrayInput)(nil)).Elem(), PolicyRuleArgsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), ResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePtrInput)(nil)).Elem(), ResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceArrayInput)(nil)).Elem(), ResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePortRangeInput)(nil)).Elem(), RulePortRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePortRangeArrayInput)(nil)).Elem(), RulePortRangeArray{})
	pulumi.RegisterOutputType(NameserverOutput{})
	pulumi.RegisterOutputType(NameserverArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleArgsOutput{})
	pulumi.RegisterOutputType(PolicyRuleArgsArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleStateOutput{})
	pulumi.RegisterOutputType(PolicyRuleStateArrayOutput{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupOutput{})
	pulumi.RegisterOutputType(RuleGroupArrayOutput{})
	pulumi.RegisterOutputType(RulePortRangeOutput{})
	pulumi.RegisterOutputType(RulePortRangeArrayOutput{})
}
