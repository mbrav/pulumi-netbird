# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NetworkRouterArgs', 'NetworkRouter']

@pulumi.input_type
class NetworkRouterArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 masquerade: pulumi.Input[builtins.bool],
                 metric: pulumi.Input[builtins.int],
                 network_id: pulumi.Input[builtins.str],
                 peer: Optional[pulumi.Input[builtins.str]] = None,
                 peer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a NetworkRouter resource.
        :param pulumi.Input[builtins.bool] enabled: Whether the router is enabled.
        :param pulumi.Input[builtins.bool] masquerade: Whether masquerading is enabled.
        :param pulumi.Input[builtins.int] metric: Routing metric value.
        :param pulumi.Input[builtins.str] network_id: ID of the network this router belongs to.
        :param pulumi.Input[builtins.str] peer: Optional peer ID associated with this router.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peer_groups: Optional list of peer group IDs associated with this router.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "masquerade", masquerade)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "network_id", network_id)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peer_groups is not None:
            pulumi.set(__self__, "peer_groups", peer_groups)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether the router is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def masquerade(self) -> pulumi.Input[builtins.bool]:
        """
        Whether masquerading is enabled.
        """
        return pulumi.get(self, "masquerade")

    @masquerade.setter
    def masquerade(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "masquerade", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[builtins.int]:
        """
        Routing metric value.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def network_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the network this router belongs to.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional peer ID associated with this router.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peer_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional list of peer group IDs associated with this router.
        """
        return pulumi.get(self, "peer_groups")

    @peer_groups.setter
    def peer_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "peer_groups", value)


@pulumi.type_token("netbird:resource:NetworkRouter")
class NetworkRouter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 masquerade: Optional[pulumi.Input[builtins.bool]] = None,
                 metric: Optional[pulumi.Input[builtins.int]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 peer: Optional[pulumi.Input[builtins.str]] = None,
                 peer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        A NetBird network router resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: Whether the router is enabled.
        :param pulumi.Input[builtins.bool] masquerade: Whether masquerading is enabled.
        :param pulumi.Input[builtins.int] metric: Routing metric value.
        :param pulumi.Input[builtins.str] network_id: ID of the network this router belongs to.
        :param pulumi.Input[builtins.str] peer: Optional peer ID associated with this router.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peer_groups: Optional list of peer group IDs associated with this router.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkRouterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NetBird network router resource.

        :param str resource_name: The name of the resource.
        :param NetworkRouterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkRouterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 masquerade: Optional[pulumi.Input[builtins.bool]] = None,
                 metric: Optional[pulumi.Input[builtins.int]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 peer: Optional[pulumi.Input[builtins.str]] = None,
                 peer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkRouterArgs.__new__(NetworkRouterArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if masquerade is None and not opts.urn:
                raise TypeError("Missing required property 'masquerade'")
            __props__.__dict__["masquerade"] = masquerade
            if metric is None and not opts.urn:
                raise TypeError("Missing required property 'metric'")
            __props__.__dict__["metric"] = metric
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["peer"] = peer
            __props__.__dict__["peer_groups"] = peer_groups
            __props__.__dict__["nb_id"] = None
        super(NetworkRouter, __self__).__init__(
            'netbird:resource:NetworkRouter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NetworkRouter':
        """
        Get an existing NetworkRouter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NetworkRouterArgs.__new__(NetworkRouterArgs)

        __props__.__dict__["enabled"] = None
        __props__.__dict__["masquerade"] = None
        __props__.__dict__["metric"] = None
        __props__.__dict__["nb_id"] = None
        __props__.__dict__["network_id"] = None
        __props__.__dict__["peer"] = None
        __props__.__dict__["peer_groups"] = None
        return NetworkRouter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Whether the router is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def masquerade(self) -> pulumi.Output[builtins.bool]:
        """
        Whether masquerading is enabled.
        """
        return pulumi.get(self, "masquerade")

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Output[builtins.int]:
        """
        Routing metric value.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="nbId")
    def nb_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "nb_id")

    @property
    @pulumi.getter
    def network_id(self) -> pulumi.Output[builtins.str]:
        """
        ID of the network this router belongs to.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def peer(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Optional peer ID associated with this router.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter
    def peer_groups(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Optional list of peer group IDs associated with this router.
        """
        return pulumi.get(self, "peer_groups")

