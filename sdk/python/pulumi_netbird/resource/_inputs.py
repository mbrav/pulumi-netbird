# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'PolicyRuleArgsArgs',
    'PolicyRuleArgsArgsDict',
    'ResourceArgs',
    'ResourceArgsDict',
    'RulePortRangeArgs',
    'RulePortRangeArgsDict',
]

MYPY = False

if not MYPY:
    class PolicyRuleArgsArgsDict(TypedDict):
        action: pulumi.Input['RuleAction']
        """
        The action to take: 'accept' or 'drop'.
        """
        bidirectional: pulumi.Input[builtins.bool]
        """
        Whether the rule applies bidirectionally.
        """
        enabled: pulumi.Input[builtins.bool]
        """
        Whether the rule is active.
        """
        name: pulumi.Input[builtins.str]
        """
        The name of the policy rule.
        """
        protocol: pulumi.Input['Protocol']
        """
        The protocol: 'tcp', 'udp', 'icmp', or 'all'.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        An optional description of the policy rule.
        """
        destination: NotRequired[pulumi.Input['ResourceArgsDict']]
        """
        Optional destination resource for the rule.
        """
        destinations: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Optional list of destination group IDs.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional unique identifier for the policy rule.
        """
        port_ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['RulePortRangeArgsDict']]]]
        """
        Optional list of port ranges.
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Optional list of ports.
        """
        source: NotRequired[pulumi.Input['ResourceArgsDict']]
        """
        Optional source resource for the rule.
        """
        sources: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Optional list of source group IDs.
        """
elif False:
    PolicyRuleArgsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyRuleArgsArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RuleAction'],
                 bidirectional: pulumi.Input[builtins.bool],
                 enabled: pulumi.Input[builtins.bool],
                 name: pulumi.Input[builtins.str],
                 protocol: pulumi.Input['Protocol'],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination: Optional[pulumi.Input['ResourceArgs']] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['RulePortRangeArgs']]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source: Optional[pulumi.Input['ResourceArgs']] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input['RuleAction'] action: The action to take: 'accept' or 'drop'.
        :param pulumi.Input[builtins.bool] bidirectional: Whether the rule applies bidirectionally.
        :param pulumi.Input[builtins.bool] enabled: Whether the rule is active.
        :param pulumi.Input[builtins.str] name: The name of the policy rule.
        :param pulumi.Input['Protocol'] protocol: The protocol: 'tcp', 'udp', 'icmp', or 'all'.
        :param pulumi.Input[builtins.str] description: An optional description of the policy rule.
        :param pulumi.Input['ResourceArgs'] destination: Optional destination resource for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] destinations: Optional list of destination group IDs.
        :param pulumi.Input[builtins.str] id: Optional unique identifier for the policy rule.
        :param pulumi.Input[Sequence[pulumi.Input['RulePortRangeArgs']]] port_ranges: Optional list of port ranges.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ports: Optional list of ports.
        :param pulumi.Input['ResourceArgs'] source: Optional source resource for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sources: Optional list of source group IDs.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bidirectional", bidirectional)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RuleAction']:
        """
        The action to take: 'accept' or 'drop'.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RuleAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def bidirectional(self) -> pulumi.Input[builtins.bool]:
        """
        Whether the rule applies bidirectionally.
        """
        return pulumi.get(self, "bidirectional")

    @bidirectional.setter
    def bidirectional(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "bidirectional", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Whether the rule is active.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input['Protocol']:
        """
        The protocol: 'tcp', 'udp', 'icmp', or 'all'.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input['Protocol']):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional description of the policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['ResourceArgs']]:
        """
        Optional destination resource for the rule.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional list of destination group IDs.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional unique identifier for the policy rule.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulePortRangeArgs']]]]:
        """
        Optional list of port ranges.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulePortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional list of ports.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['ResourceArgs']]:
        """
        Optional source resource for the rule.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Optional list of source group IDs.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sources", value)


if not MYPY:
    class ResourceArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        """
        The unique identifier of the resource.
        """
        type: pulumi.Input['ResourceType']
        """
        The type of resource: 'domain', 'host', or 'subnet'.
        """
elif False:
    ResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str],
                 type: pulumi.Input['ResourceType']):
        """
        :param pulumi.Input[builtins.str] id: The unique identifier of the resource.
        :param pulumi.Input['ResourceType'] type: The type of resource: 'domain', 'host', or 'subnet'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        """
        The unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ResourceType']:
        """
        The type of resource: 'domain', 'host', or 'subnet'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ResourceType']):
        pulumi.set(self, "type", value)


if not MYPY:
    class RulePortRangeArgsDict(TypedDict):
        end: pulumi.Input[builtins.int]
        start: pulumi.Input[builtins.int]
elif False:
    RulePortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RulePortRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[builtins.int],
                 start: pulumi.Input[builtins.int]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "start", value)


